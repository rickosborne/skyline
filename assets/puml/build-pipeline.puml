@startuml

title Build Pipeline & Assets

!include skyline-style.puml

skinparam {
	FileBorderColor<<Source>> #63ADEE
	FileBackgroundColor<<Source>> #C8E2F9
	ComponentBorderColor #EEAD63
	ComponentBackgroundColor #F9E2C8
	ComponentStyle uml1
	CloudBackgroundColor #FCFEFA
	CloudBorderColor #BBF395
	ComponentBorderColor<<Library>> #cccccc
	ComponentBackgroundColor<<Library>> #dddddd
	LegendBackgroundColor transparent
	LegendBorderColor transparent
	LegendBorderThickness 0
	PackageBorderColor #cccccc
}

package "PlantUML\nnpm run template" as PlantUMLPackage {
	file "assets/puml/*.puml\nDiagram Sources" as PlantUML<<Source>>
	component "PlantUML" as PlantUMLJar<<Library>>
	component "src/template/PlantUml*.ts\nPlantUML Renderer" as PlantUMLRenderer<<Script>>

	PlantUMLJar <.. PlantUMLRenderer : uses
	PlantUML --> PlantUMLRenderer
}

package "CSS\nnpm run sass" {
	file "assets/scss/*\nSite Stylesheet" as Stylesheet<<Source>>
	component "dart-sass" as Sass<<Library>>
	file "assets/css/all.css\nGenerated CSS" as JekyllCSS<<Intermediate>>

	Stylesheet --> Sass
  Sass --> JekyllCSS
}

package "Machine NPCs\nnpm run template" {
	file "data/schema/machine.schema.json\nMachine Data Schema" as MachineJSONSchema<<Source>>
	file "*.machine.yaml\nMachine Data" as MachineYAML<<Source>>
	file "**/{machine}.md\nMachine Stat Block" as MachineMD<<Intermediate>>
	file "data/machine/hzd-machines*.tsv\nMachine Statistics" as MachinesTSV<<Source>>
	component "src/template/*.tsx\nAdapter Renderers" as MachineRenderers<<Script>>
	component "src/machine/attacks.ts\nMachine Data Renderer" as AttacksTS<<Script>>

	MachineYAML ...> MachineJSONSchema : validated by
	MachinesTSV --> AttacksTS
	MachineYAML <-- AttacksTS : One-time initial setup
	MachineYAML --> MachineMD
	MachineRenderers --> MachineMD
}

package "Books & Player Characters\nnpm run template" {
	file "**/book.yaml\nBook Data" as BookYAML<<Source>>
	file "data/schema/book.schema.json\nBook Schema" as BookJSONSchema<<Source>>
	file "**/{player-character}.md\nPlayer Character Sheet" as PlayerCharacterMD<<Intermediate>>
	component "src/template/*.tsx\nAdapter Renderers" as PCRenderers<<Script>>

	BookYAML ..> BookJSONSchema : validated by
	PCRenderers --> PlayerCharacterMD
	BookYAML --> PlayerCharacterMD
}

package "Data Schema\nnpm run schema" {
	component "src/schema/schema.ts\nTypescript Generator" as JSONSchemaToTypescript<<Script>>
	file "src/schema/*.ts\nTypescript Interfaces" as TypeScriptSchema<<Intermediate>>

	JSONSchemaToTypescript --> TypeScriptSchema
}

package "Prose & Packaging\nnpm run jekyll:serve" {
	file "**/*.md\nProse & Rendered Blocks" as GenericMD<<Source>>
	component "Jekyll & GitHub Pages" as GHPages<<Library>>
	cloud "Site" as Site

	GenericMD --> GHPages
	GHPages --> Site
}

package "UI Javascript\nnpm run assets:skyline" {
	file "src/assets/skyline.ts\nUI TS Source" as SkylineTS<<Source>>
	component "Typescript Compiler" as SkylineTSC<<Library>>
	file "assets/js/skyline.js\nUI JS" as SkylineJS<<Intermediate>>

	SkylineTS --> SkylineTSC
	SkylineTSC --> SkylineJS
}


MachineRenderers ..> TypeScriptSchema : validated by
PCRenderers ..> TypeScriptSchema : validated by
MachineJSONSchema --> JSONSchemaToTypescript
' JSONSchemaToTypescript <-- BookJSONSchema
BookJSONSchema --> JSONSchemaToTypescript
PlantUMLRenderer --> GenericMD
MachineMD --> GHPages
PlayerCharacterMD --> GHPages
JekyllCSS --> GHPages
SkylineJS --> GHPages

legend
|= Resource |= Type |= Handling |
|<#63ADEE> File | <<Source>> | Edited by hand |
|<#EEAD63> Component | <<Script>> | Edited by Hand |
|<#dddddd> File | <<Intermediate>> | Generated, not edited! |
|<#cccccc> Component | <<Library>> | Third-party app |
endlegend

@enduml
